//HintName: Mapper.g.cs
// <auto-generated />
#nullable enable
public partial class Mapper
{
    [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "0.0.1.0")]
    public partial global::System.Collections.Generic.IReadOnlyCollection<T> MapItems<T>(global::System.Collections.Generic.IReadOnlyCollection<global::A> source) where T : class
    {
        var target = new T[source.Count];
        var i = 0;
        foreach (var item in source)
        {
            target[i] = MapItem(item);
            i++;
        }
        return target;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "0.0.1.0")]
    public partial T MapItem<T>(global::A source) where T : class
    {
        return source switch
        {
            global::A x when typeof(T).IsAssignableFrom(typeof(global::B)) => (T)(object)MapToB(x),
            _ => throw new System.ArgumentException($"Cannot map {source.GetType()} to {typeof(T)} as there is no known type mapping", nameof(source)),
        };
    }

    [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "0.0.1.0")]
    public partial global::B MapToB(global::A source)
    {
        var target = new global::B(source.Value);
        return target;
    }
}